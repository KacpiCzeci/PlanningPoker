/**
 * Generated by orval v6.7.1 üç∫
 * Do not edit manually.
 * Planning Poker API
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  RestartRequest,
  GetResultSuccessDto,
  VotingControllerGetResultParams,
  PlayerDto,
  SetIssuesBody,
  SetCurrentIssueBody
} from './schemas'
import { customInstance, ErrorType } from './custom-instance'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const appControllerGetData = (
    
 ) => {
      return customInstance<void>(
      {url: `/api`, method: 'get'
    },
      );
    }
  

export const getAppControllerGetDataQueryKey = () => [`/api`];

    
export type AppControllerGetDataQueryResult = NonNullable<AsyncReturnType<typeof appControllerGetData>>
export type AppControllerGetDataQueryError = ErrorType<unknown>

export const useAppControllerGetData = <TData = AsyncReturnType<typeof appControllerGetData>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof appControllerGetData>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetDataQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof appControllerGetData>> = () => appControllerGetData();

  const query = useQuery<AsyncReturnType<typeof appControllerGetData>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


export const votingControllerStartNew = (
    roomID: string,
    restartRequest: RestartRequest,
 ) => {
      return customInstance<void>(
      {url: `/api/voting/${roomID}/startNew`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: restartRequest
    },
      );
    }
  


    export type VotingControllerStartNewMutationResult = NonNullable<AsyncReturnType<typeof votingControllerStartNew>>
    export type VotingControllerStartNewMutationBody = RestartRequest
    export type VotingControllerStartNewMutationError = ErrorType<unknown>

    export const useVotingControllerStartNew = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof votingControllerStartNew>, TError,{roomID: string;data: RestartRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof votingControllerStartNew>, {roomID: string;data: RestartRequest}> = (props) => {
          const {roomID,data} = props || {};

          return  votingControllerStartNew(roomID,data,)
        }

      return useMutation<AsyncReturnType<typeof votingControllerStartNew>, TError, {roomID: string;data: RestartRequest}, TContext>(mutationFn, mutationOptions)
    }
    
export const votingControllerGetResult = (
    roomID: string,
    params?: VotingControllerGetResultParams,
 ) => {
      return customInstance<GetResultSuccessDto>(
      {url: `/api/voting/${roomID}/getResult`, method: 'get',
        params,
    },
      );
    }
  

export const getVotingControllerGetResultQueryKey = (roomID: string,
    params?: VotingControllerGetResultParams,) => [`/api/voting/${roomID}/getResult`, ...(params ? [params]: [])];

    
export type VotingControllerGetResultQueryResult = NonNullable<AsyncReturnType<typeof votingControllerGetResult>>
export type VotingControllerGetResultQueryError = ErrorType<void>

export const useVotingControllerGetResult = <TData = AsyncReturnType<typeof votingControllerGetResult>, TError = ErrorType<void>>(
 roomID: string,
    params?: VotingControllerGetResultParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof votingControllerGetResult>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getVotingControllerGetResultQueryKey(roomID,params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof votingControllerGetResult>> = () => votingControllerGetResult(roomID,params, );

  const query = useQuery<AsyncReturnType<typeof votingControllerGetResult>, TError, TData>(queryKey, queryFn, {enabled: !!(roomID), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}


export const votingControllerVote = (
    roomID: string,
    playerDto: PlayerDto,
 ) => {
      return customInstance<void>(
      {url: `/api/voting/${roomID}/vote`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: playerDto
    },
      );
    }
  


    export type VotingControllerVoteMutationResult = NonNullable<AsyncReturnType<typeof votingControllerVote>>
    export type VotingControllerVoteMutationBody = PlayerDto
    export type VotingControllerVoteMutationError = ErrorType<unknown>

    export const useVotingControllerVote = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof votingControllerVote>, TError,{roomID: string;data: PlayerDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof votingControllerVote>, {roomID: string;data: PlayerDto}> = (props) => {
          const {roomID,data} = props || {};

          return  votingControllerVote(roomID,data,)
        }

      return useMutation<AsyncReturnType<typeof votingControllerVote>, TError, {roomID: string;data: PlayerDto}, TContext>(mutationFn, mutationOptions)
    }
    
export const votingControllerFinish = (
    roomID: string,
 ) => {
      return customInstance<void>(
      {url: `/api/voting/${roomID}/finish`, method: 'post'
    },
      );
    }
  


    export type VotingControllerFinishMutationResult = NonNullable<AsyncReturnType<typeof votingControllerFinish>>
    
    export type VotingControllerFinishMutationError = ErrorType<unknown>

    export const useVotingControllerFinish = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof votingControllerFinish>, TError,{roomID: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof votingControllerFinish>, {roomID: string}> = (props) => {
          const {roomID} = props || {};

          return  votingControllerFinish(roomID,)
        }

      return useMutation<AsyncReturnType<typeof votingControllerFinish>, TError, {roomID: string}, TContext>(mutationFn, mutationOptions)
    }
    
export const votingControllerSetIssues = (
    roomID: string,
    setIssuesBody: SetIssuesBody,
 ) => {
      return customInstance<void>(
      {url: `/api/voting/${roomID}/setIssues`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: setIssuesBody
    },
      );
    }
  


    export type VotingControllerSetIssuesMutationResult = NonNullable<AsyncReturnType<typeof votingControllerSetIssues>>
    export type VotingControllerSetIssuesMutationBody = SetIssuesBody
    export type VotingControllerSetIssuesMutationError = ErrorType<unknown>

    export const useVotingControllerSetIssues = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof votingControllerSetIssues>, TError,{roomID: string;data: SetIssuesBody}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof votingControllerSetIssues>, {roomID: string;data: SetIssuesBody}> = (props) => {
          const {roomID,data} = props || {};

          return  votingControllerSetIssues(roomID,data,)
        }

      return useMutation<AsyncReturnType<typeof votingControllerSetIssues>, TError, {roomID: string;data: SetIssuesBody}, TContext>(mutationFn, mutationOptions)
    }
    
export const votingControllerSetCurrentIssue = (
    roomID: string,
    setCurrentIssueBody: SetCurrentIssueBody,
 ) => {
      return customInstance<void>(
      {url: `/api/voting/${roomID}/setCurrentIssue`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: setCurrentIssueBody
    },
      );
    }
  


    export type VotingControllerSetCurrentIssueMutationResult = NonNullable<AsyncReturnType<typeof votingControllerSetCurrentIssue>>
    export type VotingControllerSetCurrentIssueMutationBody = SetCurrentIssueBody
    export type VotingControllerSetCurrentIssueMutationError = ErrorType<unknown>

    export const useVotingControllerSetCurrentIssue = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof votingControllerSetCurrentIssue>, TError,{roomID: string;data: SetCurrentIssueBody}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof votingControllerSetCurrentIssue>, {roomID: string;data: SetCurrentIssueBody}> = (props) => {
          const {roomID,data} = props || {};

          return  votingControllerSetCurrentIssue(roomID,data,)
        }

      return useMutation<AsyncReturnType<typeof votingControllerSetCurrentIssue>, TError, {roomID: string;data: SetCurrentIssueBody}, TContext>(mutationFn, mutationOptions)
    }
    
